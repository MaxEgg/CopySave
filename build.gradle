plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.5'
    id "com.github.spotbugs" version "1.6.8"
    id "org.sonarqube" version "2.6.2"
}

mainClassName = "${moduleName}/com.CopySave.MainFx"

dependencies {
    compile 'org.json:json:20180813'
    compile files('libs/jnativehook.jar')
}

repositories {
    mavenCentral()
}

spotbugs {
    toolVersion = '3.1.10'
    ignoreFailures = true
}

javafx {
    modules = [
            'javafx.controls',
            'javafx.web',
            'javafx.graphics',
            'javafx.swing',
            'javafx.fxml',
            'javafx.base',
    ]
}

allprojects {
    tasks.withType(Exec) {
        doFirst {
            println commandLine
        }
    }
}

jar {
    manifest {
        attributes(
                'ModuleMainClass': "com.CopySave.MainFx"
        )
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

def java_home = hasProperty('org.gradle.java.home') ? getProperty('org.gradle.java.home') : System.getenv('JAVA_HOME')
def fx_jmods = hasProperty('path.to.fx.mods') ? getProperty('path.to.fx.mods') : System.getenv('PATH_TO_FX_MODS')

task jlink(type: Exec) {
    dependsOn 'clean'
    dependsOn 'jar'
    dependsOn 'fillLibs'
    dependsOn 'fixModuleInfo'

    workingDir 'build'

    if (java_home == null) {
        throw new RuntimeException("java_home is not defined.")
    }
    if (fx_jmods == null) {
        throw new RuntimeException("fx_jmods is not defined.")
    }

    commandLine "${java_home}/bin/jlink",
            '--module-path', "libs${File.pathSeparatorChar}${fx_jmods}",
            '--add-modules', "${moduleName}",
            '--output', "runtime/",
            '--launcher', "launch=${mainClassName}",
            '--bind-services',
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--strip-native-commands',
//            '--vm=client',
            '--no-man-pages'
}

task javaPackager(type: Exec) {
    dependsOn 'clean'
    dependsOn 'jar'
    dependsOn 'fillLibs'
    dependsOn 'fixModuleInfo'
    dependsOn 'jlink'

    workingDir 'build'

    commandLine "/Library/Java/jdk.packager-osx/jpackager",
            'create-installer',
            "pkg",
            '--module-path', "libs${File.pathSeparatorChar}${fx_jmods}",
            '--name', "CopySave",
            '--version', '0.1',
            '--strip-native-commands',
            '--singleton',
            '--icon', '../src/main/java/icons/copysaveiconextended_384x384.icns',
            '--add-modules', "${moduleName}",
            '--class', "com.CopySave.MainFx",
            '--module', "${mainClassName}",
            '--output', 'packaging'
}

task fillLibs(type: Copy) {
    into "$buildDir/libs"
    from configurations.runtime
}

task release(type: Zip) {
    dependsOn 'clean'
    dependsOn 'jar'
    dependsOn 'fillLibs'
    dependsOn 'fixModuleInfo'
    dependsOn 'jlink'
//    dependsOn 'javaPackager'

    from 'build/CopySave/'
    include '**/*' //to include contents of a folder present inside Reports directory
    archiveName 'CopySave.zip'
    destinationDir(file('build/zip'))
}


task fixModuleInfo(type: Exec) {
    commandLine "/usr/local/bin/fixModuleInfo", "/Users/max/Apps/CopySave/build/libs/json-20180813.jar", "org.json"
}